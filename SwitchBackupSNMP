#!/usr/bin/expect -f
# exp_internal 1
global spawn_id

# инфраструктурные переменные для исправления
set ftpip 192.168.100.18
set ftppath /upload/
set ftpuser user
set zabbixsrv 192.168.100.14
set snmpcomname snmp_community_name
set snmplocation snmp_location_name
set snmpcontact snmp_contact_name
set mail unforgiven.phoenix@gmail.com
# переменные работы скрипта
set params  [lindex $argv 0]
set swpswd  [lindex $argv 1]
set ftpswd  [lindex $argv 2]
set date [clock format [clock seconds] -format {%Y-%m-%d %H:%M:%S}]
set datecut [clock format [clock seconds] -format {%Y-%m-%d}]
set opercnt 0
set testftp 0
set timeout 10
# перезаписываем файл отчета
set log [open ./report w+]
# проверка наполнения аргументов
if { ([string length $params] > 0) && ([string length $swpswd] > 0) && ([string length $ftpswd] > 0) } {
   # проверка наличия файла с перечнем устройств
   if {[file exists ./switch_ip_list]} {
      puts "Switch IP file found"
   # проверка доступности фтп
   if { [regexp -nocase m $params match] } {
      spawn ftp $ftpip
      sleep 2
      expect "*ame" {send "user\r"}
      expect "*assword" {send "$ftpswd\r"}
      sleep 1
      expect {
         "*o route to host*" {puts "FTP server not found"}
         "*failed*" {puts "Wrong FTP credentials"}
         "*uccessful*" {incr testftp}
      }
      expect "*ftp>*" {send "quit\r"}
   if {$testftp == 1} {puts "FTP available"
   } else {
    puts $log "$date: Attention: FTP is not available or Bad credentials. Operations with manual-config-FTP-transfer was NOT executed"}
   }
   # форматируем перечень устройств
   set ufile [open "./switch_ip_list" r]
   set swlist [split [read $ufile] "\n"]
   close $ufile
   set pattern  {(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})( |\t)+(\w+)}
   foreach uline $swlist {
      if { [regexp $pattern $uline "" swip "" swlogin] } {
         incr opercnt
         puts "Switch IP $swip with login $swlogin added"
         set date [clock format [clock seconds] -format {%Y-%m-%d %H:%M:%S}]
         # подключение через ssh с использованием установленного метода обмена ключами (без явного указания наш хуавей не хочет дружить)
         # spawn ssh -oKexAlgorithms=+diffie-hellman-group-exchange-sha1 $swlogin@$swip (альтернативный вариант)
         spawn ssh -oKexAlgorithms=+diffie-hellman-group14-sha1 $swlogin@$swip
         sleep 3               
         expect {
         # переход к следующему IP из списка по отсутствию доступа к хосту или неверному паролю или переход дальше в случае успешной авторизации
            "*o route to host*" { puts "Host $swip not found"; puts $log "$date: Operation block # $opercnt on Switch $swip NOT complete becouse Host Unreachable"; continue }
            "*ermission denied*" { puts "For host $swip password is wrong"; puts $log "$date: Operation block # $opercnt on Switch $swip NOT complete becouse Wrong Password"; continue }
            "*yes/no*" {send "yes\r"; exp_continue}
            "*isconnect*" { puts "For host $swip password is wrong"; puts $log "$date: Operation block # $opercnt on Switch $swip NOT complete becouse Wrong Password"; continue }
            # timeout { puts "Host $swip not found"; expect eof; close $spawn_id; puts $log "$date: Operation $opercnt on Switch $swip NOT complete becouse Host Unreachable"; continue }
            "*assword" {send "$swpswd\r"; exp_continue}
         }
         expect {
            # цикл на приглашениехуавея, у джуна первое приглашение отличатся...
            "*>" {
               send "display version\r"
               expect {
                  "*Huawei*" {
                     send "system-view\r"
                  } timeout {
                     set date [clock format [clock seconds] -format {%Y-%m-%d %H:%M:%S}]
                     send "exit\r"; expect eof; close $spawn_id; puts $log "$date: Operation $opercnt on Switch $swip becouse Host Not Recognized"; continue
                  }
               }
            if {[regexp -nocase s $params match]} {
               # acl rules for SNMP access
               expect "*]" {send "acl 2100\r"}
               expect "*]" {send "rule permit source $zabbixsrv 0.0.0.0\r"}
               # expect "*]" {send "rule permit source 192.168.100.0 0.0.0.255r"} правило для указания подсети вместо конкрентого IP
               expect "*]" {send "rule deny\r"}
               expect "*]" {send "quit\r"}
               # включаем SNMP для мониторинга из Zabbix
               expect "*]" {send "snmp-agent sys-info version v2c\r"}
               expect "*]" {send "snmp-agent community read $snmpcomname acl 2100\r"}
               expect "*]" {send "snmp-agent sys-info contact $snmpcontact\r"}
               expect "*]" {send "snmp-agent sys-info location $snmplocation\r"}
               expect "*]" {send "set save-configuration\r"}
               sleep 1
               set date [clock format [clock seconds] -format {%Y-%m-%d %H:%M:%S}]
               puts $log "$date: SNMP on $swip configurated"
            }
            if {[regexp -nocase a $params match]} { 
               # включаем и настраиваем автоматический бэкап на FTP (установлен недельный период)
               expect "*]" {send "set save-configuration interval 30 delay 1\r"}
               expect "*]" {send "set save-configuration backup-to-server server $ftpip transport-type ftp user $ftpuser password $ftpswd path $ftppath\r"}
               sleep 1
               set date [clock format [clock seconds] -format {%Y-%m-%d %H:%M:%S}]
               puts $log "$date: Auto-config-backup on $swip configurated"
            }
            if { ([regexp -nocase m $params match]) && ($testftp == "1") } {
               # мануальная передача конфига на FTP
               expect "*]" {send "quit\r"}
               expect "*>" {send "save $datecut-$swip.cfg\r"}
               sleep 5
               expect "*Y/N*" {send "yes\r"}
               sleep 2
               expect "*>" {send "FTP $ftpip\r"}
               sleep 5
               expect {
                  "*ailed*" { puts "FTP server $ftpip not found"; expect eof; close $spawn_id; puts $log "$date: Operation $opercnt on Switch $swip NOT complete becouse FTP Not Found"; continue }
                  "*ser*" {send "$ftpuser\r"}
                  timeout { puts "FTP server $ftpip not found"; expect eof; close $spawn_id; puts $log "$date: Operation $opercnt on Switch $swip NOT complete becouse FTP Not Found"; continue } 
               }
               expect "*assword*" {send "$ftpswd\r"}                                             
               expect {
                  "*incorrect" { puts "FTP $ftpip Credentials is wrong"; expect eof; close $spawn_id; puts $log "$date: Operation $opercnt on Switch $swip NOT complete becouse Wrong FTP Login/Password"; continue }
                  "*ftp*" {send "cd $ftppath\r"}
               }
               expect "*ftp*" {send "binary\r"}
               expect "*ftp*" {send "put $datecut-$swip.cfg\r"}
               sleep 10
               expect "*Failed*" { send "quit\r"; send "quit\r"; set date [clock format [clock seconds] -format {%Y-%m-%d %H:%M:%S}]; puts "FTP $ftpip Credentials is wrong or transfer error"; puts $log "$date: Attention: Manual-config-backup on Switch $swip NOT complete becouse Transfer protocol error, scritp re-execution can help"; puts $log "$date: All requested operations at block #$opercnt on Switch $swip complete"; continue } 
               expect "*ftp*" {send "dir\r"}
               expect "*ftp*" {send "quit\r"}
               expect "*>" {send "quit\r"}
               expect eof
               close $spawn_id
               set date [clock format [clock seconds] -format {%Y-%m-%d %H:%M:%S}]
               puts $log "$date: Manual-config-backup on $swip executed"
            }
            puts $log "$date: All requested operations at block #$opercnt on Switch $swip complete"
            sleep 1
            }
            # цикл на приглашение джунипера
         "*%" {
            send "cli\r"
            expect "*>" {send "show version\r"}
            sleep 1
            send -- { }
            send -- { }
            expect {
               "*JUNOS*" {
               send "edit\r"
               } timeout {
                  set date [clock format [clock seconds] -format {%Y-%m-%d %H:%M:%S}]
                  send send "exit\r"; expect eof; close $spawn_id; puts $log "$date: Operation $opercnt on Switch $swip becouse Host Not Recognized"; continue
               }  
            }
            if {[regexp -nocase s $params match]} {
               # включаем SNMP для мониторинга из Zabbix
               expect "*#" {send "set snmp name \"$swip\"\r"}
               expect "*#" {send "set snmp description \"$swip-juniper-switch\"\r"}
               expect "*#" {send "set snmp location $snmplocation\r"}
               expect "*#" {send "set snmp contact $snmpcontact\r"}
               expect "*#" {send "set snmp community $snmpcomname authorization read-only\r"}
               expect "*#" {send "set snmp client-list list0 $zabbixsrv\r"}
               expect "*#" {send "set snmp community $snmpcomname client-list-name list0\r"}
               expect "*#" {send "commit\r"}
               sleep 10
               set date [clock format [clock seconds] -format {%Y-%m-%d %H:%M:%S}]
               puts $log "$date: SNMP on $swip configurated"
            }
            if {[regexp -nocase a $params match]} {
               # включаем и настраиваем автоматический бэкап на FTP (установлен недельный период 604800)
               expect "*#" {send "set event-options generate-event config-archival-event time-interval 60\r"}
               expect "*#" {send "set event-options policy config-archive-policy events config-archival-event\r"}
               expect "*#" {send "set event-options policy config-archive-policy then upload filename /config/juniper.conf.gz destination conFTP\r"}
               expect "*#" {send "set event-options destinations conFTP archive-sites \"ftp://$ftpuser@$ftpip$ftppath\" password \"$ftpswd\"\r"}
               expect "*#" {send "commit\r"}
               sleep 10
               set date [clock format [clock seconds] -format {%Y-%m-%d %H:%M:%S}]
               puts $log "$date: Auto-config-backup on $swip configurated"
            }
            if { ([regexp -nocase m $params match]) && ($testftp == "1") } {
               # мануальная передача конфига на FTP
               expect "*#" {send "save ftp://$ftpuser:$ftpswd@$ftpip$ftppath$datecut-$swip.conf\r"}
               sleep 4
               expect {
                  "*Wrote*" { puts "Manual-config-backup on $swip executed"; set date [clock format [clock seconds] -format {%Y-%m-%d %H:%M:%S}]; puts $log "$date: Manual-config-backup on $swip executed"; }
                  "*Error*" { set date [clock format [clock seconds] -format {%Y-%m-%d %H:%M:%S}]; puts "FTP $ftpip Credentials is wrong or transfer error"; puts $log "$date: Attention: Manual-config-backup on Switch $swip NOT complete becouse Transfer protocol error, re-execution can help"; puts $log "$date: All requested operations at block #$opercnt on Switch $swip complete"; continue } 
                  timeout { puts "FTP server $ftpip not found"; puts $log "$date: Operation $opercnt on Switch $swip NOT complete becouse FTP Not Found"; continue }
               }
            }
         expect "*#" {send "quit\r"}
         expect "*>" {send "quit\r"}
         close $spawn_id
         set date [clock format [clock seconds] -format {%Y-%m-%d %H:%M:%S}]
         puts $log "$date: All requested operations at block #$opercnt on Switch $swip complete"
         }
         }
      }
   }  
   puts "
   END of LIST"
   puts $log "
   $date: END of LIST. Total operation blocks performed: $opercnt"
   close $log
   # информирование на почту, если задан соответствующий аргумент
   if {[regexp -nocase r $params match]} {
      exec cat ./report | mail -a "From: SwitchService <myprivateownmailservice@gmail.com>" -a "Subject: $date service report" $mail
   }
   } else { 
      puts "
      *********************************************************
      *   Switch IP file NOT found                            *
      *   Add file named switch_ip_list on script's directory *
      *   File syntax sould be like:                          *
      *   switch1_ip switch1_login                            *
      *   switch2_ip switch2_login                            *
      *   example:                                            *
      *   192.168.0.1 user                                    *
      *   192.168.0.2 admin                                   *
      *********************************************************   
      "
      puts $log "$date: Switch IP file NOT found"
      close $log
      exit 1
   }      
} else {
   puts "
   *****************************************************************************************************************************************
   *  Parameters or credentials on script arguments NOT found!                                                                             *
   *  Add script parameters on 1st script argument for select required function (m - manual backup, a- auto backup, s- snmp configuration  *
   *  Add script parametr on 1st script argument for reporting result on e-mail (r - reporting results on e-mail)                          *
   *  Add switch and ftp passwords on 2nd & 3rd script arguments (2nd - switch password, 3rd - FTP password)                               *
   *  Example: ./scriptname masr huaweipass ftppass                                                                                        *
   *  Attention: Use reporting function (r) if only mail-service (postfix/ssmtp etc) configured                                            *
   *****************************************************************************************************************************************
   "
   exit 1
}
exit 0